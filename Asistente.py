# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Asistente.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import pickle
from funciones import *
from os import path
#from PandasModel import PandasModel

class PandasModel(QtCore.QAbstractTableModel): 
    def __init__(self, df = pd.DataFrame(), parent=None): 
        QtCore.QAbstractTableModel.__init__(self, parent=parent)
        self._df = df

    def headerData(self, section, orientation, role=QtCore.Qt.DisplayRole):
        if role != QtCore.Qt.DisplayRole:
            return QtCore.QVariant()

        if orientation == QtCore.Qt.Horizontal:
            try:
                return self._df.columns.tolist()[section]
            except (IndexError, ):
                return QtCore.QVariant()
        elif orientation == QtCore.Qt.Vertical:
            try:
                # return self.df.index.tolist()
                return self._df.index.tolist()[section]
            except (IndexError, ):
                return QtCore.QVariant()

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if role != QtCore.Qt.DisplayRole:
            return QtCore.QVariant()

        if not index.isValid():
            return QtCore.QVariant()

        return QtCore.QVariant(str(self._df.iloc[index.row(), index.column()]))

    def setData(self, index, value, role):
        row = self._df.index[index.row()]
        col = self._df.columns[index.column()]
        if hasattr(value, 'toPyObject'):
            # PyQt4 gets a QVariant
            value = value.toPyObject()
        else:
            # PySide gets an unicode
            dtype = self._df[col].dtype
            if dtype != object:
                value = None if value == '' else dtype.type(value)
        self._df.set_value(row, col, value)
        return True

    def rowCount(self, parent=QtCore.QModelIndex()): 
        return len(self._df.index)

    def columnCount(self, parent=QtCore.QModelIndex()): 
        return len(self._df.columns)

    def sort(self, column, order):
        colname = self._df.columns.tolist()[column]
        self.layoutAboutToBeChanged.emit()
        self._df.sort_values(colname, ascending= order == QtCore.Qt.AscendingOrder, inplace=True)
        self._df.reset_index(inplace=True, drop=True)
        self.layoutChanged.emit()


class Ui_AsistenteRegistros(object):
    def setupUi(self, AsistenteRegistros):
        AsistenteRegistros.setObjectName("AsistenteRegistros")
        AsistenteRegistros.setEnabled(True)
        AsistenteRegistros.resize(650, 475)
        AsistenteRegistros.setMinimumSize(QtCore.QSize(650, 475))
        AsistenteRegistros.setMaximumSize(QtCore.QSize(650, 475))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(11)
        AsistenteRegistros.setFont(font)
        self.centralwidget = QtWidgets.QWidget(AsistenteRegistros)
        self.centralwidget.setObjectName("centralwidget")
        self.List_MReg = QtWidgets.QListWidget(self.centralwidget)
        self.List_MReg.setGeometry(QtCore.QRect(400, 320, 241, 131))
        self.List_MReg.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.List_MReg.setObjectName("List_MReg")
        self.Bot_Reg = QtWidgets.QPushButton(self.centralwidget)
        self.Bot_Reg.setGeometry(QtCore.QRect(270, 340, 91, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Bot_Reg.setFont(font)
        self.Bot_Reg.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Bot_Reg.setObjectName("Bot_Reg")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(460, 290, 141, 21))
        self.label.setObjectName("label")
        self.Bot_HAnt = QtWidgets.QPushButton(self.centralwidget)
        self.Bot_HAnt.setGeometry(QtCore.QRect(0, 0, 161, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Bot_HAnt.setFont(font)
        self.Bot_HAnt.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Bot_HAnt.setObjectName("Bot_HAnt")
        self.Bot_HSig = QtWidgets.QPushButton(self.centralwidget)
        self.Bot_HSig.setGeometry(QtCore.QRect(490, 0, 161, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Bot_HSig.setFont(font)
        self.Bot_HSig.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Bot_HSig.setObjectName("Bot_HSig")
        self.Label_hors = QtWidgets.QLabel(self.centralwidget)
        self.Label_hors.setGeometry(QtCore.QRect(170, 0, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.Label_hors.setFont(font)
        self.Label_hors.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Label_hors.setAlignment(QtCore.Qt.AlignCenter)
        self.Label_hors.setObjectName("Label_hors")
        self.Bot_Sal = QtWidgets.QPushButton(self.centralwidget)
        self.Bot_Sal.setGeometry(QtCore.QRect(270, 410, 91, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Bot_Sal.setFont(font)
        self.Bot_Sal.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Bot_Sal.setObjectName("Bot_Sal")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(80, 300, 131, 31))
        self.label_2.setObjectName("label_2")
        self.Text_MatReg = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.Text_MatReg.setGeometry(QtCore.QRect(20, 340, 221, 31))
        self.Text_MatReg.setObjectName("Text_MatReg")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 40, 651, 251))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.Vbox = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.Vbox.setContentsMargins(0, 0, 0, 0)
        self.Vbox.setObjectName("Vbox")
        self.Bot_Emergencia = QtWidgets.QPushButton(self.centralwidget)
        self.Bot_Emergencia.setGeometry(QtCore.QRect(80, 400, 121, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Bot_Emergencia.setFont(font)
        self.Bot_Emergencia.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Bot_Emergencia.setObjectName("Bot_Emergencia")
        AsistenteRegistros.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(AsistenteRegistros)
        self.statusbar.setObjectName("statusbar")
        AsistenteRegistros.setStatusBar(self.statusbar)

        self.retranslateUi(AsistenteRegistros)
        QtCore.QMetaObject.connectSlotsByName(AsistenteRegistros)

        self.List_MReg.setItemAlignment(QtCore.Qt.AlignHCenter)

        self.pandasTv = QtWidgets.QTableView()



        self.contador=1
        self.horarios=pickle.load( open( "horarios_full.xd", "rb" ) )
        
        if path.exists("horarios_filt.xd"):
            self.horarios=pickle.load( open( "horarios_filt.xd", "rb" ) )
            
        

        self.df = self.horarios["Horario 1"]
        self.model = PandasModel(self.df)
        self.pandasTv.setModel(self.model)
        self.Label_hors.setText("Horario {} de {}".format(self.contador,len(self.horarios)))

        self.Vbox.addWidget(self.pandasTv) 
        self.Bot_Sal.clicked.connect(lambda: AsistenteRegistros.close())
        self.Bot_HSig.clicked.connect(self.siguiente_horario)
        self.Bot_HAnt.clicked.connect(self.anterior_horario)
        self.Bot_Reg.clicked.connect(self.registar_mate)

    def siguiente_horario(self):
        if self.contador != len(self.horarios):
            self.contador += 1
            self.Label_hors.setText("Horario {} de {}".format(self.contador,len(self.horarios)))
            self.df=self.horarios["Horario "+str(self.contador)]
            self.model = PandasModel(self.df)
            self.pandasTv.setModel(self.model)
        else:
            boton = QtWidgets.QMessageBox()
            boton.setWindowTitle("Error")
            boton.setIcon(QtWidgets.QMessageBox.Critical)
            boton.setText("No existen m√°s horarios disponibles")
            x = boton.exec_()
    
    def anterior_horario(self):
        if self.contador != 1:
            self.contador -= 1
            self.Label_hors.setText("Horario {} de {}".format(self.contador,len(self.horarios)))
            self.df=self.horarios["Horario "+str(self.contador)]
            self.model = PandasModel(self.df)
            self.pandasTv.setModel(self.model)
        else:
            boton = QtWidgets.QMessageBox()
            boton.setWindowTitle("Error")
            boton.setIcon(QtWidgets.QMessageBox.Critical)
            boton.setText("No existen horarios anteriores disponibles")
            x = boton.exec_()
    
    def registar_mate(self):
        mask = self.df==self.Text_MatReg.toPlainText().strip()
        if mask.any().any() and self.Text_MatReg.toPlainText().strip()!="":
            self.horarios = filtrar_horarios(self.horarios,self.Text_MatReg.toPlainText().strip())
            self.List_MReg.addItem(self.Text_MatReg.toPlainText().strip())
            self.contador = 1
            self.Label_hors.setText("Horario {} de {}".format(self.contador,len(self.horarios)))
            self.df=self.horarios["Horario "+str(self.contador)]
            self.model = PandasModel(self.df)
            self.pandasTv.setModel(self.model)
            self.Text_MatReg.clear()
        else:
            boton = QtWidgets.QMessageBox()
            boton.setWindowTitle("Error")
            boton.setIcon(QtWidgets.QMessageBox.Critical)
            boton.setText("Materia inexistente en el horario mostrado.\nVerifique la informacion ingresada")
            x = boton.exec_()

    def emergencia(self):
        if path.exists("horarios_filt.xd"):
            self.contador=1
            self.horarios=pickle.load( open( "horarios_full.xd", "rb" ) )
            for i in range(self.List_MReg.count()):
                mate = self.List_MReg.item().text()
                self.horarios = filtrar_horarios(self.horarios,mate)
            self.Label_hors.setText("Horario {} de {}".format(self.contador,len(self.horarios)))
            self.df=self.horarios["Horario "+str(self.contador)]
            self.model = PandasModel(self.df)
            self.pandasTv.setModel(self.model)
            
        else:
            boton = QtWidgets.QMessageBox()
            boton.setWindowTitle("Error")
            boton.setIcon(QtWidgets.QMessageBox.Critical)
            boton.setText("No existen horarios por consultar")
            x = boton.exec_()


        

    def retranslateUi(self, AsistenteRegistros):
        _translate = QtCore.QCoreApplication.translate
        AsistenteRegistros.setWindowTitle(_translate("AsistenteRegistros", "Asistente de Registros - By David Y√°nez"))
        self.Bot_Reg.setText(_translate("AsistenteRegistros", "Registrar"))
        self.label.setText(_translate("AsistenteRegistros", "Materias Registradas"))
        self.Bot_HAnt.setText(_translate("AsistenteRegistros", "Horario Anterior"))
        self.Bot_HSig.setText(_translate("AsistenteRegistros", "Horario Siguiente"))
        self.Label_hors.setText(_translate("AsistenteRegistros", "Horario"))
        self.Bot_Sal.setText(_translate("AsistenteRegistros", "Salir"))
        self.label_2.setText(_translate("AsistenteRegistros", "Materia a Registrar"))
        self.Bot_Emergencia.setText(_translate("AsistenteRegistros", "Emergencia"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    AsistenteRegistros = QtWidgets.QMainWindow()
    ui = Ui_AsistenteRegistros()
    ui.setupUi(AsistenteRegistros)
    AsistenteRegistros.show()
    sys.exit(app.exec_())
